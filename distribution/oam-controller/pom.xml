<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.o-ran-sc.oam-oam-controller.distribution</groupId>
    <artifactId>sdnr-distribution</artifactId>
    <version>13.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>SDNR distribution</name>
    <description>Creates patched opendaylight container with ONAP based wt features</description>

    <organization>
        <name>o-ran-sc</name>
    </organization>

    <properties>
        <base.sdnc.image.repo>nexus3.onap.org:10001/onap/sdnc-image:2.6.0</base.sdnc.image.repo>
        <base.image.repo>eclipse-temurin:21.0.5_11-jdk-alpine</base.image.repo>
        <image.repo>10.20.6.10:30000</image.repo>
	    <image.name>o-ran-sc/oam-oam-controller/sdnr-image</image.name>
        <image.version>13.0.0-SNAPSHOT-latest</image.version>
        <odl.karaf.version>0.21.2</odl.karaf.version>
        <odl.aaa.version>0.20.8</odl.aaa.version>
        <odl.ops4j.version>8.0.27</odl.ops4j.version>
        <ccsdk.features.version>13.0.0-SNAPSHOT</ccsdk.features.version>
        <ccsdk.feature.groupid>org.o-ran-sc.oam-oam-controller.features.sdnr.wt</ccsdk.feature.groupid>
        <ccsdk.feature.repopath>system/org/o-ran-sc/oam-oam-controller/features/sdnr/wt</ccsdk.feature.repopath>
        <ccsdk.project.version>${project.version}</ccsdk.project.version>
        <ccsdk.build.timestamp>${maven.build.timestamp}</ccsdk.build.timestamp>
        <!-- Below not used -->
        <docker.buildArg.https_proxy>${https_proxy}</docker.buildArg.https_proxy>
        <maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>
        <opendaylight.root>opt/opendaylight</opendaylight.root>
        <docker.push.phase>deploy</docker.push.phase>
        <docker.verbose>true</docker.verbose>
        <docker.release.registry>nexus3.o-ran-sc.org:10002</docker.release.registry>
        <docker.snapshot.registry>nexus3.o-ran-sc.org:10003</docker.snapshot.registry>
        <docker.pull.registry>nexus3.o-ran-sc.org:10001</docker.pull.registry>
		<!-- <docker.push.registry>nexus3.o-ran-sc.org:10003</docker.push.registry> -->
    </properties>

    <distributionManagement>
        <repository>
            <id>o-ran-sc-releases</id>
            <url>https://nexus.o-ran-sc.org/content/repositories/releases</url>
        </repository>
        <snapshotRepository>
            <id>o-ran-sc-snapshots</id>
            <url>https://nexus.o-ran-sc.org/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <dependencies>
        <dependency>
            <groupId>${ccsdk.feature.groupid}</groupId>
            <artifactId>sdnr-wt-feature-aggregator-installer</artifactId>
            <version>${ccsdk.features.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
    </dependencies>

    <build>
        <extensions>
            <extension>
                <!-- this extension is required by wagon in order to pass the proxy -->
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-http-lightweight</artifactId>
                <version>2.2</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <version>2.1.1</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>${basedir}/src/main/groovy/TagVersion.groovy</source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>copy-dockerfile</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/docker</directory>
                                    <includes>
                                        <include>Dockerfile</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-scripts</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/opendaylight/bin</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>
                                    <includes>
                                        <include>*.sh</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-scripts4</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/scripts</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/scripts</directory>
                                    <includes>
                                        <include>.bashrc</include>
                                        <include>startODL.sh</include>
                                        <include>installCerts.py</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-etc</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/etc</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>
                                    <includes>
                                        <include>*.properties</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                                <resource>
                                    <directory>src/main/etc</directory>
                                    <includes>
                                        <include>*</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-certs</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/certs</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/certs</directory>
                                    <includes>
                                        <include>*</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-patches</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>                  
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/patches</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/patches</directory>
                                    <includes>
                                        <include>*</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <!-- had to overwrite version because of a filelength bug during in unpack 
                    goal which cuts filenames -->
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>unpack features</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <excludeTransitive>true</excludeTransitive>
                            <overWriteReleases>true</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                    <execution>
                        <id>get-odl-distribution</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.opendaylight.integration</groupId>
                                    <artifactId>karaf</artifactId>
                                    <version>${odl.karaf.version}</version>
                                    <type>tar.gz</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${basedir}/target/docker-stage/odl</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                   <!-- <execution>
                        <id>copy-with-alternalte-repo-2</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.highstreet-technologies.aaa</groupId>
                                    <artifactId>aaa-authn-api</artifactId>
                                    <version>${odl.aaa.version}</version>
                                    <outputDirectory>${project.build.directory}/docker-stage/patches</outputDirectory>
                                    <destFileName>aaa-authn-api-${odl.aaa.version}.jar</destFileName>
                                    <excludes>*</excludes>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.highstreet-technologies.org.ops4j.pax.web</groupId>
                                    <artifactId>pax-web-jetty</artifactId>
                                    <version>${odl.ops4j.version}</version>
                                    <outputDirectory>${project.build.directory}/docker-stage/patches</outputDirectory>
                                    <destFileName>pax-web-jetty-${odl.ops4j.version}.jar</destFileName>
                                    <excludes>*</excludes>
                                </artifactItem>
                            </artifactItems>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>  -->
                </executions>

            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.33.0</version>
                <inherited>false</inherited>
                <configuration>
                <pullRegistry>${docker.pull.registry}</pullRegistry>
                <pushRegistry>${docker.push.registry}</pushRegistry>
                    <images>
                        <image>
                            <name>${image.name}</name>
                            <build>
                                <cleanup>try</cleanup>
                                <dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
                                <dockerFile>Dockerfile</dockerFile>
                                <tags>
                                    <tag>${project.docker.latestminortag.version}</tag>
                                    <tag>${project.docker.latestfulltag.version}</tag>
                                    <tag>${project.docker.latesttagtimestamp.version}</tag>
                                    <tag>${image.version}</tag>
                                </tags>
                            </build>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-images</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>

                    <execution>
                        <id>push-images</id>
                        <phase>${docker.push.phase}</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
